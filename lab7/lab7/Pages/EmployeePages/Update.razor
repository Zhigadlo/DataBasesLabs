@page "/employee/update/{id:int}"
@inject EmployeeService EmployeeService
@inject ProfessionService ProfessionService
@inject NavigationManager NavigationManager
@using Data;
@using lab7.Services;

<PageTitle>Employee updating</PageTitle>
<AuthorizeView>
    <Authorized Context="Update">
        @if (employee != null)
        {
            <h1>Employee update</h1>
            <EditForm EditContext="editContext">
                <DataAnnotationsValidator />
                <ValidationSummary/>
        
                <label for="firstName">First name</label>
                <InputText id="firstName" @bind-Value="employee.FirstName"/><br/>
        
                <label for="lastName">Last name</label>
                <InputText id="lastName" @bind-Value="employee.LastName" /><br />
        
                <label for="middleName">Middle name</label>
                <InputText id="middleName" @bind-Value="employee.MiddleName" /><br />
        
                <label for="age">Age</label>
                <InputNumber id="age" @bind-Value="employee.Age" /><br />
        
                <label for="education">Education</label>
                <InputText id="education" @bind-Value="employee.Education" /><br />

                <label for="profession">Profession</label>
                <InputSelect id="profession" @bind-Value="employee.ProfessionId">
                    @foreach (var profession in professions)
                    {
                        <option value="@profession.Id">@profession.Name</option>
                    }
                </InputSelect><br />
                <button type="submit" @onclick="EmployeeUpdate">Update</button>
            </EditForm>
        }
        else
        {
            <h1>Employee does not exist</h1>
        }
    </Authorized>
    <NotAuthorized>
        <h1>Access denied</h1>
    </NotAuthorized>
    
</AuthorizeView>

@functions {
    EditContext editContext;
    private List<Profession> professions;

    [Parameter]
    public int Id { get; set; }

    private Employee? employee;

    protected async override Task OnInitializedAsync()
    {
        professions = await ProfessionService.GetAll();
        employee = EmployeeService.Get(Id);
        editContext = new EditContext(employee);
    }

    private void EmployeeUpdate()
    {
        if (editContext.Validate())
        {
            EmployeeService.Update(employee);
            var message = "Employee was successfully updated";
            NavigationManager.NavigateTo($"/employees/successpage/{message}");
        }
    }

    private void ToEmployeeList()
    {
        NavigationManager.NavigateTo("/employees");
    }
}