@page "/employee/update/{id:int}"
@inject EmployeeService EmployeeService
@inject ProfessionService ProfessionService
@inject NavigationManager NavigationManager
@using Data;
@using lab7.Services;

<PageTitle>Employee updating</PageTitle>

@if (employee != null)
{
    <h1>Employee update</h1>
    <EditForm Model="@employee">
        <DataAnnotationsValidator />
        <ValidationSummary/>
        
        <label for="firstName">First name</label>
        <InputText id="firstName" @bind-Value="employee.FirstName"/><br/>
        
        <label for="lastName">Last name</label>
        <InputText id="lastName" @bind-Value="employee.LastName" /><br />
        
        <label for="middleName">Middle name</label>
        <InputText id="middleName" @bind-Value="employee.MiddleName" /><br />
        
        <label for="age">Age</label>
        <InputNumber id="age" @bind-Value="employee.Age" /><br />
        
        <label for="education">Education</label>
        <InputText id="education" @bind-Value="employee.Education" /><br />

        <label for="profession">Profession</label>
        <InputSelect id="profession" @bind-Value="employee.ProfessionId">
            @foreach (var profession in ProfessionService.GetAll())
            {
                <option value="@profession.Id">@profession.Name</option>
            }
        </InputSelect><br />
        <button type="submit" @onclick="EmployeeUpdate">Update</button>
    </EditForm>
}
else
{
    <h1>Employee does not exist</h1>
}

@functions {
    [Parameter]
    public int Id { get; set; }

    private Employee? employee;

    protected override Task OnInitializedAsync()
    {
        employee = EmployeeService.Get(Id);
        return base.OnInitializedAsync();
    }

    private void EmployeeUpdate()
    {
        var result = EmployeeService.Update(employee);
        NavigationManager.NavigateTo($"/employee/updateresult/{result}");
    }

    private void ToEmployeeList()
    {
        NavigationManager.NavigateTo("/employees");
    }
}